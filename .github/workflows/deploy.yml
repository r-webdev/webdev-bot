name: Build, Test and Deploy Discord Bot to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Read Node version
      run: |
        NODE_VERSION=$(cat .nvmrc | sed 's/v//')
        echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          cd /home/${{ secrets.VPS_USER }}/webdev-bot-deploy

          # Stash any local changes
          git stash push -m "Auto-deploy $(date)" 2>/dev/null || true

          # Pull latest changes
          git checkout main
          git pull origin main

          # Read NODE_VERSION from .nvmrc
          export NODE_VERSION=$(cat .nvmrc | sed 's/v//')
          echo "Using Node version: $NODE_VERSION"

          # Create .env.local file with secrets
          cat > .env.local << EOF
          DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
          CLIENT_ID=${{ secrets.CLIENT_ID }}
          GUIDES_CHANNEL_ID=${{ secrets.GUIDES_CHANNEL_ID }}
          SERVER_ID=${{ secrets.SERVER_ID }}
          REPEL_LOG_CHANNEL_ID=${{ secrets.REPEL_LOG_CHANNEL_ID }}
          REPEL_ROLE_ID=${{ secrets.REPEL_ROLE_ID }}
          MODERATORS_ROLE_IDS=${{ secrets.MODERATORS_ROLE_IDS }}
          EOF

          # Stop any existing containers
          docker compose down || true

          # Build and start production container with profile
          docker compose --profile prod up -d --build

          # Check status
          echo "Deployment completed. Container status:"
          docker compose ps